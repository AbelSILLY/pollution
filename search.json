[
  {
    "objectID": "montpellier/tp.html",
    "href": "montpellier/tp.html",
    "title": "Montpellier",
    "section": "",
    "text": "Voici un graphique montrant l’évolution de concentration des polluants à Montpellier en 2023.\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Premières visualisations",
    "section": "",
    "text": "Le graphique ci-dessous affiche la concentration (?) de polluants en micro-gramme en Occitanie sur les 5 dernières années. On remarque une forte concentration en O3 et en NOX chaque année.\n\nimport modpollution\ndf_a = modpollution.as_df(\"./modpollution/data/data_a.json\")\ndf_a = modpollution.modif_date2(df_a)\ndf_a = modpollution.extraire_donnees_station(df_a, 'Toulouse-Jacquier Urbain')\ndf_a = modpollution.extraire_polluant(df_a,'O3')\n#df_m = modpollution.extraire_polluant(df_m,'PM10')\n#df_m\nmodpollution.plotpoll(df_a)\n\n\n                                                \n\n\n\n\n/tmp/ipykernel_2211/1489887017.py:32: FutureWarning:\n\n\n\nThe `ci` parameter is deprecated. Use `errorbar=None` for the same effect.\n\n\n\n\n\n\n\nLe graphique ce-dessous présente une autre visualisation des mêmes données qui nous permet de voir l’évolution dans le temps de la concentration (s’il y en a une).\n\n\n\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n# %%\nimport requests\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n\ndef obtenir_donnees_toulouse():\n    url = \"https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/mesures_occitanie_mensuelle_poll_princ/FeatureServer/0/query\"\n    \n    # Paramètres de la requête pour récupérer toutes les données\n    params_toutes_donnees = {\n        'outFields': '*',\n        'where': '1=1',  # Récupérer toutes les données\n        'f': 'geojson'\n    }\n\n    # Effectuer la requête pour récupérer toutes les données\n    response_toutes_donnees = requests.get(url, params=params_toutes_donnees)\n\n    # Vérifier si la requête a réussi (code de statut 200)\n    if response_toutes_donnees.status_code == 200:\n        # Récupérer les données JSON\n        data_toutes_donnees = response_toutes_donnees.json()\n\n        # Filtrer les données pour Toulouse\n        donnees_toulouse = [feature for feature in data_toutes_donnees['features'] if feature['properties']['nom_com'] == 'TOULOUSE']\n\n        # Préparer les données pour le graphique\n        polluants_par_mois = defaultdict(list)\n\n        if donnees_toulouse:\n            for feature in donnees_toulouse:\n                properties = feature['properties']\n                polluant = properties['nom_poll']\n                concentration = properties['valeur']\n                date_debut_timestamp = properties['date_debut']\n\n                # Convertir le timestamp en date et extraire le mois\n                mois_date_debut = datetime.utcfromtimestamp(date_debut_timestamp / 1000).strftime('%Y-%m')\n\n                polluants_par_mois[polluant].append((mois_date_debut, concentration))\n\n            # Trier les données par mois\n            for polluant, data in polluants_par_mois.items():\n                data.sort(key=lambda x: datetime.strptime(x[0], '%Y-%m'))\n\n                # Calculer la moyenne des concentrations pour chaque mois\n                moyennes_par_mois = defaultdict(float)\n                compteur_par_mois = defaultdict(int)\n\n                for mois, concentration in data:\n                    if concentration is not None:  # Vérifier si la concentration n'est pas None\n                        moyennes_par_mois[mois] += concentration\n                        compteur_par_mois[mois] += 1\n\n                for mois in moyennes_par_mois:\n                    if compteur_par_mois[mois] &gt; 0:\n                        moyennes_par_mois[mois] /= compteur_par_mois[mois]\n\n                polluants_par_mois[polluant] = list(moyennes_par_mois.items())\n\n            # Créer le graphique avec des points plus petits et des lignes en pointillé\n            for polluant, data in polluants_par_mois.items():\n                mois, concentrations = zip(*data)\n                plt.plot(mois, concentrations, marker='o', markersize=5, linestyle='--', linewidth=1, label=polluant)\n\n            plt.xlabel('Mois')\n            plt.ylabel('Concentration (en ug.m-3)')\n            plt.title('Concentration des polluants à Toulouse par mois')\n            plt.xticks(rotation=45, ha='right')  # Pour faire pivoter les noms des mois\n\n            # Afficher une étiquette sur trois mois\n            plt.xticks(mois[::2], mois[::2])\n\n            plt.legend(loc='upper right')\n\n            # Afficher le graphique\n            plt.show()\n        else:\n            print(\"Aucune donnée trouvée pour Toulouse.\")\n    else:\n        print(f\"La requête a échoué avec le code d'erreur {response_toutes_donnees.status_code}\")\n\n# Exécute la fonction pour obtenir les données et afficher le graphique\nobtenir_donnees_toulouse()\n\n# %%\n\n\n\n\n\n\n\n Back to top"
  }
]