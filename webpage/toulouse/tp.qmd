# Toulouse
Evolution des concentrations de polluant sur 5 ans.
```{python}
#| echo: false
import pandas as pd
import sys
sys.path.append('../..')
import modpollution
df_a = pd.read_csv("../../modpollution/data/data_a.csv")
df_a = modpollution.modif_date_csv(df_a)
df_a = modpollution.extraire_donnees_villes(df_a,'TOULOUSE')
df_a = modpollution.mean_df(df_a)
modpollution.plotpoll(df_a)
```


## O3

```{python}
#| echo: false
import pandas as pd
import sys
sys.path.append('../..')
import modpollution
df_a = pd.read_csv("../../modpollution/data/data_a.csv")
df_m = pd.read_csv("../../modpollution/data/data_m.csv")
df_a = modpollution.modif_date_csv(df_a)
df_a = modpollution.extraire_donnees_villes(df_a,'TOULOUSE')
df_a = modpollution.extraire_polluant(df_a,'O3')
df_m = modpollution.modif_date_csv(df_m)
df_m  = modpollution.extraire_donnees_villes(df_m,'TOULOUSE')
df_m = modpollution.extraire_polluant(df_m,'O3')
df_j = pd.read_csv('../../modpollution/data/data_j.csv')
df_j = modpollution.modif_date_csv(df_j)
df_j = modpollution.extraire_donnees_villes(df_j,'TOULOUSE')
df_j = modpollution.extraire_polluant(df_j,'O3')
modpollution.plotpollline(df_a,color='nom_station',titre='Concentration O3 à Toulouse par station (5 dernières années)')
modpollution.plotpollline(df_m,color='nom_station',titre='Concentration O3 à Toulouse en 2022-2023')
modpollution.plotpollline(df_j,color='nom_station',titre='Concentration O3 à Toulouse le mois dernier')
```


# NO2

```{python}
#| echo: false
import pandas as pd
import sys
sys.path.append('../..')
import modpollution
df_a = pd.read_csv("../../modpollution/data/data_a.csv")
df_m = pd.read_csv("../../modpollution/data/data_m.csv")
df_a = modpollution.modif_date_csv(df_a)
df_a = modpollution.extraire_donnees_villes(df_a,'TOULOUSE')
df_a = modpollution.extraire_polluant(df_a,'NO2')
df_m = modpollution.modif_date_csv(df_m)
df_m  = modpollution.extraire_donnees_villes(df_m,'TOULOUSE')
df_m = modpollution.extraire_polluant(df_m,'NO2')
df_j = pd.read_csv('../../modpollution/data/data_j.csv')
df_j = modpollution.modif_date_csv(df_j)
df_j = modpollution.extraire_donnees_villes(df_j,'TOULOUSE')
df_j = modpollution.extraire_polluant(df_j,'NO2')
modpollution.plotpollline(df_a,color='nom_station',titre='Concentration en NO2 à Toulouse par station (5 dernières années)')
modpollution.plotpollline(df_m,color='nom_station',titre='Concentration en NO2 à Toulouse en 2022-2023')
modpollution.plotpollline(df_j,color='nom_station',titre='Concentration en NO2 à Toulouse le mois dernier')

```


```{python}
#| echo: false
import requests
import pandas as pd
import plotly.express as px
from datetime import datetime
from collections import defaultdict

# URL de l'API GeoJSON pour Toulouse
url = "https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/mesures_occitanie_annuelle_poll_princ/FeatureServer/0/query?outFields=*&where=nom_com='TOULOUSE'&f=geojson"

# Récupérer les données GeoJSON depuis l'API
response = requests.get(url)
data = response.json()

# Extraire les données pertinentes pour Toulouse
features = data['features']
toulouse_data = [feature['properties'] for feature in features]

# Préparer les données pour le tracé
pollutants_per_year = defaultdict(list)

for entry in toulouse_data:
    pollutant = entry['nom_poll']
    concentration = entry['valeur']
    date_debut_timestamp = entry['date_debut']
    year = datetime.utcfromtimestamp(date_debut_timestamp / 1000).year

    pollutants_per_year[pollutant].append((year, concentration))

# Transformer les données pour le tracé (calculer la concentration moyenne par année)
for pollutant, data in pollutants_per_year.items():
    data.sort(key=lambda x: x[0])

    # Calculer les concentrations moyennes par année
    averages_per_year = defaultdict(float)
    counts_per_year = defaultdict(int)

    for year, concentration in data:
        if concentration is not None:
            averages_per_year[year] += concentration
            counts_per_year[year] += 1

    for year in averages_per_year:
        if counts_per_year[year] > 0:
            averages_per_year[year] /= counts_per_year[year]

    pollutants_per_year[pollutant] = list(averages_per_year.items())

# Créer un DataFrame pour Plotly Express
df = pd.DataFrame([(pollutant, year, concentration) for pollutant, data in pollutants_per_year.items() for year, concentration in data],
                  columns=['Pollutant', 'Year', 'Concentration'])

# Tracé avec Plotly Express
fig = px.line(df, x='Year', y='Concentration', color='Pollutant', markers=True, line_group='Pollutant',
              labels={'Concentration': 'Concentration', 'Year': 'Année'},
              title='Concentration des polluants à Toulouse par année',
              template='plotly', height=600)

# Personnaliser le tracé pour ressembler à Matplotlib
fig.update_traces(
    line=dict(width=1),  # Épaisseur de la ligne
    marker=dict(size=8)   # Taille des marqueurs
)

# Ajouter un curseur pour filtrer les données par année
fig.update_layout(
    xaxis=dict(
        rangeslider=dict(
            visible=True
        ),
        type='linear'  # Assurez-vous que le type d'axe x est 'linear' pour que le curseur fonctionne
    )
)

# Afficher le tracé interactif
fig.show()

```


